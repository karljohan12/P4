// DO NOT EDIT
// Generated by JFlex 1.8.1 http://jflex.de/
// source: standalone.flex

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Copyright (C) 1998-2018  Gerwin Klein <lsf@jflex.de>                    *
 * All rights reserved.                                                    *
 *                                                                         *
 * License: BSD                                                            *
 *                                                                         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */


/**
   This is a small example of a standalone text substitution scanner 
   It reads a IDENTIFIER after the keyword IDENTIFIER and substitutes all occurences
   of "hello" with "hello <IDENTIFIER>!". There is a sample input file
   "sample.inp" provided in this directory 
*/

package Scanner;
import java_cup.runtime.*;
import Parser.*;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Scanner implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\2\22\0\1\1"+
    "\1\3\1\4\4\0\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\3\17\4\20\2\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\0\1\30"+
    "\1\31\1\32\1\33\1\34\1\32\1\35\1\36\1\37"+
    "\4\32\1\40\1\41\1\42\1\32\1\43\1\44\1\45"+
    "\2\32\1\46\3\32\1\47\1\50\1\51\3\32\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\32\1\60\1\61"+
    "\1\32\1\62\1\63\1\32\1\64\1\65\2\32\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\32\1\74\1\32"+
    "\1\75\1\76\1\77\1\100\u0181\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\2\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\11\22\1\23\1\24\14\22\1\25\1\26"+
    "\1\27\1\30\1\31\1\0\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\0\1\1\1\40\1\0\1\41\1\42"+
    "\1\43\1\44\3\22\1\45\15\22\1\46\7\22\1\47"+
    "\1\50\2\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\2\0\1\41\1\60\1\22\1\61\15\22\1\62\1\63"+
    "\6\22\1\51\1\0\3\22\1\64\1\65\2\22\1\66"+
    "\4\22\1\67\1\22\1\70\2\22\1\71\1\72\1\22"+
    "\1\73\1\74\1\75\1\22\1\76\1\77\1\22\1\100"+
    "\1\22\1\101\2\22\1\102\3\22\1\103\1\104\1\105"+
    "\1\22\1\106\1\107\5\22\1\110";

  private static int [] zzUnpackAction() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\202\0\202\0\202\0\u0104"+
    "\0\u0145\0\202\0\u0186\0\u01c7\0\u0208\0\u0249\0\202\0\202"+
    "\0\u028a\0\u02cb\0\u030c\0\202\0\u034d\0\u038e\0\u03cf\0\u0410"+
    "\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\u03cf\0\u03cf\0\u0596"+
    "\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d\0\u079e"+
    "\0\u07df\0\u0820\0\u0861\0\202\0\202\0\202\0\u08a2\0\202"+
    "\0\u08e3\0\202\0\202\0\202\0\202\0\202\0\202\0\u0924"+
    "\0\u0965\0\202\0\u09a6\0\u0208\0\202\0\202\0\202\0\u09e7"+
    "\0\u0a28\0\u0a69\0\u03cf\0\u0aaa\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae"+
    "\0\u0bef\0\u0c30\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75\0\u0db6"+
    "\0\u03cf\0\u0df7\0\u0e38\0\u0e79\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d"+
    "\0\202\0\202\0\u0fbe\0\u0fff\0\202\0\202\0\202\0\202"+
    "\0\202\0\202\0\u1040\0\u1081\0\u09a6\0\u03cf\0\u10c2\0\u03cf"+
    "\0\u1103\0\u1144\0\u1185\0\u11c6\0\u1207\0\u1248\0\u1289\0\u12ca"+
    "\0\u130b\0\u134c\0\u138d\0\u13ce\0\u140f\0\u03cf\0\u03cf\0\u1450"+
    "\0\u1491\0\u14d2\0\u1513\0\u1554\0\u1595\0\202\0\u15d6\0\u1617"+
    "\0\u1658\0\u1699\0\u03cf\0\u03cf\0\u16da\0\u171b\0\u03cf\0\u175c"+
    "\0\u179d\0\u17de\0\u181f\0\u03cf\0\u1860\0\u03cf\0\u18a1\0\u18e2"+
    "\0\u03cf\0\u03cf\0\u1923\0\u03cf\0\u03cf\0\u1964\0\u19a5\0\u03cf"+
    "\0\u03cf\0\u19e6\0\u03cf\0\u1a27\0\u03cf\0\u1a68\0\u1aa9\0\u03cf"+
    "\0\u1aea\0\u1b2b\0\u1b6c\0\u03cf\0\u03cf\0\u03cf\0\u1bad\0\u03cf"+
    "\0\u03cf\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1\0\u1cf2\0\u03cf";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\3\1\4\1\5\1\0\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\0\1\14\1\15\3\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\2\27"+
    "\1\30\4\27\1\31\1\27\1\32\1\33\1\34\1\35"+
    "\1\36\1\27\1\37\1\27\1\40\1\41\1\42\1\43"+
    "\1\44\1\27\1\45\2\27\1\46\1\27\1\47\1\50"+
    "\1\51\1\27\1\52\1\53\1\27\1\54\1\3\1\55"+
    "\1\56\2\57\1\0\1\57\1\60\43\57\1\61\30\57"+
    "\126\0\1\62\100\0\1\63\64\0\1\64\13\0\1\65"+
    "\66\0\1\66\11\0\1\67\63\0\1\70\4\0\1\71"+
    "\7\0\1\72\67\0\1\73\1\0\4\74\73\0\1\73"+
    "\1\0\4\16\104\0\1\75\100\0\1\76\100\0\1\77"+
    "\71\0\4\27\6\0\10\27\1\100\34\27\1\0\1\27"+
    "\20\0\4\27\6\0\4\27\1\101\40\27\1\0\1\27"+
    "\20\0\4\27\6\0\45\27\1\0\1\27\20\0\4\27"+
    "\6\0\10\27\1\102\34\27\1\0\1\27\20\0\4\27"+
    "\6\0\13\27\1\103\31\27\1\0\1\27\20\0\4\27"+
    "\6\0\35\27\1\104\7\27\1\0\1\27\20\0\4\27"+
    "\6\0\26\27\1\105\16\27\1\0\1\27\20\0\4\27"+
    "\6\0\6\27\1\106\36\27\1\0\1\27\20\0\4\27"+
    "\6\0\6\27\1\107\36\27\1\0\1\27\20\0\4\27"+
    "\6\0\35\27\1\110\1\111\6\27\1\0\1\27\20\0"+
    "\4\27\6\0\22\27\1\112\12\27\1\113\7\27\1\0"+
    "\1\27\20\0\4\27\6\0\26\27\1\114\6\27\1\115"+
    "\7\27\1\0\1\27\20\0\4\27\6\0\33\27\1\116"+
    "\11\27\1\0\1\27\20\0\4\27\6\0\22\27\1\117"+
    "\12\27\1\120\7\27\1\0\1\27\20\0\4\27\6\0"+
    "\27\27\1\121\4\27\1\122\10\27\1\0\1\27\20\0"+
    "\4\27\6\0\41\27\1\123\3\27\1\0\1\27\20\0"+
    "\4\27\6\0\26\27\1\124\16\27\1\0\1\27\20\0"+
    "\4\27\6\0\43\27\1\125\1\27\1\0\1\27\20\0"+
    "\4\27\6\0\36\27\1\126\6\27\1\0\1\27\20\0"+
    "\4\27\6\0\35\27\1\127\7\27\1\0\1\27\20\0"+
    "\4\27\6\0\30\27\1\130\14\27\1\0\1\27\2\0"+
    "\2\57\1\0\1\57\1\0\43\57\1\0\30\57\4\0"+
    "\1\131\1\132\10\0\2\133\1\134\27\0\1\135\2\0"+
    "\1\136\3\0\1\137\4\0\1\140\1\0\1\141\1\0"+
    "\1\142\10\0\10\143\1\144\70\143\2\71\1\3\76\71"+
    "\16\0\4\145\75\0\4\27\6\0\3\27\1\146\41\27"+
    "\1\0\1\27\20\0\4\27\6\0\5\27\1\147\37\27"+
    "\1\0\1\27\20\0\4\27\6\0\3\27\1\150\41\27"+
    "\1\0\1\27\20\0\4\27\6\0\23\27\1\151\21\27"+
    "\1\0\1\27\20\0\4\27\6\0\36\27\1\152\6\27"+
    "\1\0\1\27\20\0\4\27\6\0\4\27\1\153\40\27"+
    "\1\0\1\27\20\0\4\27\6\0\4\27\1\154\40\27"+
    "\1\0\1\27\20\0\4\27\6\0\35\27\1\155\7\27"+
    "\1\0\1\27\20\0\4\27\6\0\26\27\1\156\16\27"+
    "\1\0\1\27\20\0\4\27\6\0\37\27\1\157\5\27"+
    "\1\0\1\27\20\0\4\27\6\0\34\27\1\160\10\27"+
    "\1\0\1\27\20\0\4\27\6\0\27\27\1\161\3\27"+
    "\1\162\11\27\1\0\1\27\20\0\4\27\6\0\41\27"+
    "\1\163\3\27\1\0\1\27\20\0\4\27\6\0\37\27"+
    "\1\164\5\27\1\0\1\27\20\0\4\27\6\0\33\27"+
    "\1\165\11\27\1\0\1\27\20\0\4\27\6\0\36\27"+
    "\1\166\6\27\1\0\1\27\20\0\4\27\6\0\40\27"+
    "\1\167\4\27\1\0\1\27\20\0\4\27\6\0\33\27"+
    "\1\170\11\27\1\0\1\27\20\0\4\27\6\0\40\27"+
    "\1\171\4\27\1\0\1\27\20\0\4\27\6\0\31\27"+
    "\1\172\13\27\1\0\1\27\20\0\4\27\6\0\41\27"+
    "\1\173\3\27\1\0\1\27\20\0\4\27\6\0\31\27"+
    "\1\174\13\27\1\0\1\27\20\0\4\27\6\0\31\27"+
    "\1\175\13\27\1\0\1\27\20\0\3\134\76\0\3\176"+
    "\60\0\10\143\1\177\70\143\10\0\1\144\4\0\1\3"+
    "\101\0\4\27\6\0\7\27\1\200\35\27\1\0\1\27"+
    "\20\0\4\27\6\0\35\27\1\201\7\27\1\0\1\27"+
    "\20\0\4\27\6\0\42\27\1\202\2\27\1\0\1\27"+
    "\20\0\4\27\6\0\10\27\1\203\34\27\1\0\1\27"+
    "\20\0\4\27\6\0\10\27\1\204\34\27\1\0\1\27"+
    "\20\0\4\27\6\0\33\27\1\205\11\27\1\0\1\27"+
    "\20\0\4\27\6\0\22\27\1\206\22\27\1\0\1\27"+
    "\20\0\4\27\6\0\26\27\1\207\16\27\1\0\1\27"+
    "\20\0\4\27\6\0\37\27\1\210\5\27\1\0\1\27"+
    "\20\0\4\27\6\0\22\27\1\211\22\27\1\0\1\27"+
    "\20\0\4\27\6\0\22\27\1\212\22\27\1\0\1\27"+
    "\20\0\4\27\6\0\23\27\1\213\21\27\1\0\1\27"+
    "\20\0\4\27\6\0\26\27\1\214\16\27\1\0\1\27"+
    "\20\0\4\27\6\0\37\27\1\215\5\27\1\0\1\27"+
    "\20\0\4\27\6\0\33\27\1\216\11\27\1\0\1\27"+
    "\20\0\4\27\6\0\41\27\1\217\3\27\1\0\1\27"+
    "\20\0\4\27\6\0\40\27\1\220\4\27\1\0\1\27"+
    "\20\0\4\27\6\0\26\27\1\221\16\27\1\0\1\27"+
    "\20\0\4\27\6\0\25\27\1\222\17\27\1\0\1\27"+
    "\20\0\4\27\6\0\33\27\1\223\11\27\1\0\1\27"+
    "\2\0\10\143\1\177\4\143\1\3\63\143\16\0\4\27"+
    "\6\0\10\27\1\224\34\27\1\0\1\27\20\0\4\27"+
    "\6\0\40\27\1\225\4\27\1\0\1\27\20\0\4\27"+
    "\6\0\35\27\1\226\7\27\1\0\1\27\20\0\4\27"+
    "\6\0\26\27\1\227\16\27\1\0\1\27\20\0\4\27"+
    "\6\0\32\27\1\230\12\27\1\0\1\27\20\0\4\27"+
    "\6\0\40\27\1\231\4\27\1\0\1\27\20\0\4\27"+
    "\6\0\41\27\1\232\3\27\1\0\1\27\20\0\4\27"+
    "\6\0\44\27\1\233\1\0\1\27\20\0\4\27\6\0"+
    "\33\27\1\234\11\27\1\0\1\27\20\0\4\27\6\0"+
    "\26\27\1\235\16\27\1\0\1\27\20\0\4\27\6\0"+
    "\36\27\1\236\6\27\1\0\1\27\20\0\4\27\6\0"+
    "\24\27\1\237\20\27\1\0\1\27\20\0\4\27\6\0"+
    "\26\27\1\240\16\27\1\0\1\27\20\0\4\27\6\0"+
    "\12\27\1\241\32\27\1\0\1\27\20\0\4\27\6\0"+
    "\22\27\1\242\22\27\1\0\1\27\20\0\4\27\6\0"+
    "\33\27\1\243\11\27\1\0\1\27\20\0\4\27\6\0"+
    "\26\27\1\244\16\27\1\0\1\27\20\0\4\27\6\0"+
    "\34\27\1\245\10\27\1\0\1\27\20\0\4\27\6\0"+
    "\30\27\1\246\14\27\1\0\1\27\20\0\4\27\6\0"+
    "\35\27\1\247\7\27\1\0\1\27\20\0\4\27\6\0"+
    "\34\27\1\250\10\27\1\0\1\27\20\0\4\27\6\0"+
    "\40\27\1\251\4\27\1\0\1\27\20\0\4\27\6\0"+
    "\37\27\1\252\5\27\1\0\1\27\20\0\4\27\6\0"+
    "\31\27\1\253\13\27\1\0\1\27\20\0\4\27\6\0"+
    "\40\27\1\254\4\27\1\0\1\27\20\0\4\27\6\0"+
    "\31\27\1\255\13\27\1\0\1\27\20\0\4\27\6\0"+
    "\35\27\1\256\7\27\1\0\1\27\20\0\4\27\6\0"+
    "\34\27\1\257\10\27\1\0\1\27\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7475];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\3\11\2\1\1\11\4\1\2\11"+
    "\3\1\1\11\27\1\3\11\1\1\1\11\1\0\6\11"+
    "\1\0\1\1\1\11\1\0\1\1\3\11\31\1\2\11"+
    "\2\1\6\11\2\0\31\1\1\11\1\0\60\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

    StringBuilder string = new StringBuilder();

    private Symbol symbol(int type) {
        return new JavaSymbol(type, yyline+1, yycolumn+1);
      }
      private Symbol symbol(int type, Object value) {
        return new JavaSymbol(type, yyline+1, yycolumn+1, value);
      }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /* ignore */
            }
            // fall through
          case 73: break;
          case 2:
            { return symbol(NOT);
            }
            // fall through
          case 74: break;
          case 3:
            { yybegin(STRING); string.setLength(0);
            }
            // fall through
          case 75: break;
          case 4:
            { return symbol(LPAREN);
            }
            // fall through
          case 76: break;
          case 5:
            { return symbol(RPAREN);
            }
            // fall through
          case 77: break;
          case 6:
            { return symbol(MULT);
            }
            // fall through
          case 78: break;
          case 7:
            { return symbol(PLUS);
            }
            // fall through
          case 79: break;
          case 8:
            { return symbol(COMMA);
            }
            // fall through
          case 80: break;
          case 9:
            { return symbol(MINUS);
            }
            // fall through
          case 81: break;
          case 10:
            { return symbol(DIV);
            }
            // fall through
          case 82: break;
          case 11:
            { return symbol(INTEGER_LITERAL, Integer.valueOf(yytext()));
            }
            // fall through
          case 83: break;
          case 12:
            { return symbol(COLON);
            }
            // fall through
          case 84: break;
          case 13:
            { return symbol(SEMICOLON);
            }
            // fall through
          case 85: break;
          case 14:
            { return symbol(LT);
            }
            // fall through
          case 86: break;
          case 15:
            { return symbol(EQ);
            }
            // fall through
          case 87: break;
          case 16:
            { return symbol(GT);
            }
            // fall through
          case 88: break;
          case 17:
            { return symbol(QUESTION);
            }
            // fall through
          case 89: break;
          case 18:
            { return symbol(IDENTIFIER, yytext());
            }
            // fall through
          case 90: break;
          case 19:
            { return symbol(LBRACK);
            }
            // fall through
          case 91: break;
          case 20:
            { return symbol(RBRACK);
            }
            // fall through
          case 92: break;
          case 21:
            { return symbol(LBRACE);
            }
            // fall through
          case 93: break;
          case 22:
            { return symbol(RBRACE);
            }
            // fall through
          case 94: break;
          case 23:
            { return symbol(COMP);
            }
            // fall through
          case 95: break;
          case 24:
            { string.append( yytext() );
            }
            // fall through
          case 96: break;
          case 25:
            { yybegin(YYINITIAL); return symbol(STRING_LITERAL, string.toString());
            }
            // fall through
          case 97: break;
          case 26:
            { return symbol(NOTEQ);
            }
            // fall through
          case 98: break;
          case 27:
            { return symbol(MULTEQ);
            }
            // fall through
          case 99: break;
          case 28:
            { return symbol(PLUSPLUS);
            }
            // fall through
          case 100: break;
          case 29:
            { return symbol(PLUSEQ);
            }
            // fall through
          case 101: break;
          case 30:
            { return symbol(MINUSMINUS);
            }
            // fall through
          case 102: break;
          case 31:
            { return symbol(MINUSEQ);
            }
            // fall through
          case 103: break;
          case 32:
            { return symbol(DIVEQ);
            }
            // fall through
          case 104: break;
          case 33:
            { return symbol(FLOATING_POINT_LITERAL, new Double(yytext()));
            }
            // fall through
          case 105: break;
          case 34:
            { return symbol(LTEQ);
            }
            // fall through
          case 106: break;
          case 35:
            { return symbol(EQEQ);
            }
            // fall through
          case 107: break;
          case 36:
            { return symbol(GTEQ);
            }
            // fall through
          case 108: break;
          case 37:
            { return symbol(OROR);
            }
            // fall through
          case 109: break;
          case 38:
            { return symbol(IF);
            }
            // fall through
          case 110: break;
          case 39:
            { string.append( '\"' );
            }
            // fall through
          case 111: break;
          case 40:
            { string.append( '\'' );
            }
            // fall through
          case 112: break;
          case 41:
            { char val = (char) Integer.parseInt(yytext().substring(1),8);
                                       string.append( val );
            }
            // fall through
          case 113: break;
          case 42:
            { string.append( '\\' );
            }
            // fall through
          case 114: break;
          case 43:
            { string.append( '\b' );
            }
            // fall through
          case 115: break;
          case 44:
            { string.append( '\f' );
            }
            // fall through
          case 116: break;
          case 45:
            { string.append( '\n' );
            }
            // fall through
          case 117: break;
          case 46:
            { string.append( '\r' );
            }
            // fall through
          case 118: break;
          case 47:
            { string.append( '\t' );
            }
            // fall through
          case 119: break;
          case 48:
            { return symbol(ANDAND);
            }
            // fall through
          case 120: break;
          case 49:
            { return symbol(END);
            }
            // fall through
          case 121: break;
          case 50:
            { return symbol(FOR);
            }
            // fall through
          case 122: break;
          case 51:
            { return symbol(INT);
            }
            // fall through
          case 123: break;
          case 52:
            { return symbol(THEN);
            }
            // fall through
          case 124: break;
          case 53:
            { return symbol(WHEN);
            }
            // fall through
          case 125: break;
          case 54:
            { return symbol(CASE);
            }
            // fall through
          case 126: break;
          case 55:
            { return symbol(ELSE);
            }
            // fall through
          case 127: break;
          case 56:
            { return symbol(NULL_LITERAL);
            }
            // fall through
          case 128: break;
          case 57:
            { return symbol(BOOLEAN_LITERAL, true);
            }
            // fall through
          case 129: break;
          case 58:
            { return symbol(VOID);
            }
            // fall through
          case 130: break;
          case 59:
            { return symbol(BEGIN);
            }
            // fall through
          case 131: break;
          case 60:
            { return symbol(ROBOT);
            }
            // fall through
          case 132: break;
          case 61:
            { return symbol(SERVO);
            }
            // fall through
          case 133: break;
          case 62:
            { return symbol(BREAK);
            }
            // fall through
          case 134: break;
          case 63:
            { return symbol(CONST);
            }
            // fall through
          case 135: break;
          case 64:
            { return symbol(DELAY);
            }
            // fall through
          case 136: break;
          case 65:
            { return symbol(BOOLEAN_LITERAL, false);
            }
            // fall through
          case 137: break;
          case 66:
            { return symbol(WHILE);
            }
            // fall through
          case 138: break;
          case 67:
            { return symbol(DOUBLE);
            }
            // fall through
          case 139: break;
          case 68:
            { return symbol(RETURN);
            }
            // fall through
          case 140: break;
          case 69:
            { return symbol(SWITCH);
            }
            // fall through
          case 141: break;
          case 70:
            { return symbol(BOOLEAN);
            }
            // fall through
          case 142: break;
          case 71:
            { return symbol(DEFAULT);
            }
            // fall through
          case 143: break;
          case 72:
            { return symbol(SERVOPOSITION);
            }
            // fall through
          case 144: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   */
  private static String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Scanner [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Scanner scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Scanner(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
